/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };

        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt TAB Q    &kp W           &mt LG(SPACE) D  &kp F                  &kp K                   &kp J                        &kp U        &kp R      &kp L       &kp SEMI
&kp A        &kp S           &kp E            &lt 2 T                &kp G                   &kp Y                        &lt 3 N      &kp I      &kp O       &kp H
&mt LCTRL Z  &mt LEFT_ALT X  &kp C            &kp V                  &mt LEFT_GUI B          &kp P                        &kp M        &kp COMMA  &kp PERIOD  &mt SLASH SQT
                                              &mt LEFT_SHIFT ESCAPE  &mt LEFT_COMMAND ENTER  &mt LA(BACKSPACE) BACKSPACE  &lt 1 SPACE
            >;
        };

        symbols {
            bindings = <
&kp SQT       &kp HASH   &kp NON_US_BACKSLASH  &kp SLASH        &kp TILDE         &kp AT_SIGN     &kp DOUBLE_QUOTES  &kp LEFT_BRACKET                 &kp RIGHT_BRACKET                  &kp PIPE
&kp ASTERISK  &kp EQUAL  &kp PLUS              &kp EXCLAMATION  &kp GRAVE         &kp MINUS       &kp QUESTION       &mt LEFT_BRACE LEFT_PARENTHESIS  &mt RIGHT_BRACE RIGHT_PARENTHESIS  &kp AMPERSAND
&tog 1        &kp CARET  &none                 &kp DOLLAR       &kp LA(NUMBER_2)  &kp UNDERSCORE  &kp COLON          &kp LESS_THAN                    &kp GREATER_THAN                   &kp PERCENT
                                               &trans           &trans            &trans          &trans
            >;
        };

        nav {
            bindings = <
&none         &kp LG(LS(S))  &kp LG(LA(I))  &kp F4        &kp F5  &kp F6          &kp F7        &kp F8           &kp F9         &kp F10
&kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3   &kp NUMBER_4  &kp N5  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN         &kp RIGHT      &kp N0
&to 2         &kp F12        &kp LBKT       &kp RBKT      &to 0   &kp KP_PLUS     &kp KP_MINUS  &kp KP_MULTIPLY  &kp KP_DIVIDE  &to 0
                                            &trans        &trans  &trans          &mo 1
            >;
        };

        num {
            bindings = <
&bt BT_CLR     &bt BT_PRV     &bt BT_NXT     &bt BT_CLR_ALL  &to 0          &to 0   &none  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3    &bt BT_SEL 4   &none   &none  &none       &none              &none
&bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3   &bt BT_DISC 4  &none   &none  &none       &none              &none
                                             &trans          &trans         &trans  &mo 1
            >;
        };
    };
};
