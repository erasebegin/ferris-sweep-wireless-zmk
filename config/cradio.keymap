/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BAS 0
#define NUM 1
#define SYM 2
#define NAV 3
#define SCNSHT  LG(LS(S))
#define TSK_MGR LC(LS(ESC))

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <0>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <222>;
};

&sl {
    release-after-ms = <800>;
};

&sk {
    release-after-ms = <500>;
    quick-release;
};

&caps_word { continue-list = <UNDERSCORE MINUS BSPC>; };

/ {
    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT, LAYERS) \
            combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
                layers = <LAYERS>; \
                slow-release; \
            };

        #define DEFAULT_TIME 64
        #define LONG_TIME    128

        #define ALL_LAYERS     BAS NUM SYM NAV
        #define DEFAULT_LAYERS BAS NUM SYM NAV

        COMBO(l_bail    , &bail     , 30 31, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(r_bail    , &bail     , 32 33, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(tab       , &kp TAB   , 13 30, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(del       , &kp DEL   , 16 33, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(caps_word , &caps_word, 30 33, DEFAULT_TIME, DEFAULT_LAYERS)

        COMBO(l_sk_ctrl , &sk LCTRL , 13 23, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(l_sk_shift, &sk LSHIFT, 12 22, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(l_sk_alt  , &sk LALT  , 11 21, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(l_win     , &kp LWIN  , 10 20, DEFAULT_TIME, DEFAULT_LAYERS)

        COMBO(r_sk_ctrl , &sk LCTRL , 16 26, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(r_sk_shift, &sk RSHIFT, 17 27, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(r_sk_alt  , &sk RALT  , 18 28, DEFAULT_TIME, DEFAULT_LAYERS)
        COMBO(r_win     , &kp LWIN  , 19 29, DEFAULT_TIME, DEFAULT_LAYERS)

        COMBO(num_bspc  , &kp BSPC  , 6  16, DEFAULT_TIME, NUM           )
        COMBO(num_comma , &kp COMMA , 7  17, DEFAULT_TIME, NUM           )
        COMBO(num_space , &kp SPACE , 8  18, DEFAULT_TIME, NUM           )
    };

    behaviors {
        bt_sel: tap_dance_bluetooth_select {
            compatible = "zmk,behavior-tap-dance";
            label = "BLUETOOTH_SELECT";
            #binding-cells = <0>;
            tapping-term-ms = <256>;
            bindings = <&bt BT_SEL 0>, <&bt BT_SEL 1>, <&bt BT_SEL 2>;
        };

        bt_clr: tap_dance_bluetooth_clear {
            compatible = "zmk,behavior-tap-dance";
            label = "BLUETOOTH_CLEAR";
            #binding-cells = <0>;
            tapping-term-ms = <256>;
            bindings = <&trans>, <&bt BT_CLR>;
        };

        f1_: tap_dance_f1_ {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_F1_F24";
            #binding-cells = <0>;
            tapping-term-ms = <512>;
            bindings =
                <&kp F1>,
                <&kp F2>,
                <&kp F3>,
                <&kp F4>,
                <&kp F5>,
                <&kp F6>,
                <&kp F7>,
                <&kp F8>,
                <&kp F9>,
                <&kp F10>,
                <&kp F11>,
                <&kp F12>;
        };

        media: tap_dance_media {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MEDIA";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PP>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        output: tap_output {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_OUTPUT";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&out OUT_USB>, <&out OUT_BLE>;
        };
    };

    macros {
        // No way to cancel sticky keys so using F24 as a NOOP proxy
        // Bailing out of any sticky keyboard state macro
        bail: macro_bail {
            label = "MACRO_BAIL";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp F24 &to 0>;
        };

        hx_left: hx_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp LEFT_BRACKET>;
            label = "HX_LEFT";
        };

        hx_right: hx_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET &kp RIGHT_BRACKET>;
            label = "HX_RIGHT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BAS";
            bindings = <
&mt TAB Q    &kp W           &mt LG(SPACE) D  &kp F                  &kp K               &kp J                        &kp U        &kp R      &kp L    &mt LS(TAB) TAB
&kp A        &lt 2 S         &kp E            &lt 1 T                &kp G               &kp Y                        &lt 3 N      &kp I      &kp O    &kp H
&mt LCTRL Z  &mt LEFT_ALT X  &kp C            &kp V                  &mt LEFT_GUI B      &kp P                        &kp M        &kp COMMA  &kp DOT  &mt SLASH SQT
                                             &mt LEFT_SHIFT ESCAPE  &mt LEFT_GUI ENTER  &mt LA(BACKSPACE) BACKSPACE  &lt 3 SPACE
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp COMMA         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH   &kp KP_PLUS  &none   &kp NON_US_BACKSLASH  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp COLON         &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PERIOD  &none        &none   &kp PLUS              &kp ASTERISK          &kp MINUS
&kp LEFT_CONTROL  &kp N7        &kp N8        &kp N9        &kp N0      &kp MINUS    &kp N1  &kp N2                &kp N3                &kp EQUAL
                                             &trans        &sl 2       &sl 3        &kp N0
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp SQT       &kp LA(N3)  &kp BACKSLASH          &kp SLASH        &kp PIPE2         &kp AT_SIGN     &kp DOUBLE_QUOTES  &kp LEFT_BRACKET                 &kp RIGHT_BRACKET                  &kp PIPE
&kp ASTERISK  &kp EQUAL  &kp PLUS              &kp EXCLAMATION  &kp NON_US_BACKSLASH  &kp MINUS       &kp QUESTION       &mt LEFT_BRACE LEFT_PARENTHESIS  &mt RIGHT_BRACE RIGHT_PARENTHESIS  &kp AMPERSAND
&kp SEMI      &kp CARET  &kp LBRC              &kp DOLLAR       &kp LA(NUMBER_2)  &kp UNDERSCORE  &kp COLON          &kp LESS_THAN                    &kp GREATER_THAN                   &kp PERCENT
                                             &trans           &trans            &trans          &trans
            >;
        };

        navigation_layer {
            label = "NAV";
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &out OUT_TOG  &kp C_MUTE  &kp PSCRN   &kp C_VOL_UP  &kp C_VOL_DN  &media
&kp INS       &hx_left      &hx_right     &none       &none         &mt LA(LEFT) LEFT  &kp DOWN  &kp UP  &mt LA(RIGHT) RIGHT  &output
&kp DEL       &kp LG(LS(TAB))  &kp LG(TAB)  &trans  &kp PG_DN      &trans             &trans    &kp SCNSHT  &kp LG(L)  &kp TSK_MGR
                                          &trans  &kp LC(LEFT_ARROW)  &kp LC(RIGHT)  &trans
            >;
        };
    };
};
